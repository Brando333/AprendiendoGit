git log             -> muestra  todos los commits que se hicieron y un hash asociados a ellos 

git log --stat      -> muestra los commits y tambien los archivos especificos que cambiaron en dicho commit, y detalles cuantos bits cambiaron

git rm --cached [file] -> quita del staging area el archivo, es el reverso de 'git add'

git show [file] -> muestra los cambios de este archivo con su versión mas reciente (HEAD, [branch]) y su última versión o último commit da igual.

git diff [hash de commit a] [hash de commit b] ->   muestra la diferencia entre un commit y otro, para que se muestre la diferencia de manera correcta.
                                                    Primero se pone el hash del commit màs antiguo y luego el hash del commit más reciente.
                                                    Esto sucede por que diff, no sabe de por sí cuál es el commit más nuevo o el más antiguo
                                                    si no que asume que el primer parametro es el hash del commit más antiguo y el segundo parametro, el hash del commit mas reciente.


git diff                                        -> Si lo usamos sin parametros muestra la diferencia entre el 'working directory' y el 'staging area'
                                                    Por eso si lo usamos después de usar 'git add .' no aparece nada pues el working directory se alinea con el staging area.
                                                    


git reset [hash del commit] --hard            -> Regresar a ese commit, borrando todos los commits que estaban después de ese commit, es peligroso pero es el que más se usa.
git reset [hash del commit] --soft            -> Regresar a ese commit, borrando todos los commits que estaban después de ese commit, si había archivos en staging, aún siguen ahí.


git checkout [hash del commit]                  -> Regresa el working directory al commit indicado creando una rama experimental
git checkout [hash del commit] [file name]      -> Regresa solamente un archivo al estado en el que estaba en dicho commit sin moverte de la rama en la que estabas
                                                    Este archivo entonces ahora queda como modified y para revertirlo debemos hacer otro checkout así:
            Entonces para volver el archivo a como lo teniamos:
            * git checkout [nombre de la rama en la que ya estabamos y seguimos estando] [file name]








git fetch                       -> Se trae la última versión del reposotirio remoto, al local repository (.git), pero no lo copia en el working directory.
git merge                       -> Fuciona lo que tenemos en el local repository con el working directory.

git pull = git fetch & git merge



________________

git reflog      -> Muestra todos los cambios que se le hicieron a la rama y su hash para regresar a ellos. desde commits, resets, o checkouts; se puede revertir esos cambios.



git commit -am   -> añade al 'staging area' los archivos que se han modificado, solo cuenta para archivos que ya estaban 'tracked', 
                    si hay archivos 'untracked' toca hacer el git add manualmente